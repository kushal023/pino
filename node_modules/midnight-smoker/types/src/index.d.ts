export namespace events {
    const SMOKE_BEGIN: "SmokeBegin";
    const SMOKE_OK: "SmokeOk";
    const SMOKE_FAILED: "SmokeFailed";
    const FIND_NPM_BEGIN: "FindNpmBegin";
    const FIND_NPM_FAILED: "FindNpmFailed";
    const FIND_NPM_OK: "FindNpmOk";
    const PACK_BEGIN: "PackBegin";
    const PACK_FAILED: "PackFailed";
    const PACK_OK: "PackOk";
    const INSTALL_BEGIN: "InstallBegin";
    const INSTALL_FAILED: "InstallFailed";
    const INSTALL_OK: "InstallOk";
    const RUN_NPM_BEGIN: "RunNpmBegin";
    const RUN_NPM_OK: "RunNpmOk";
    const RUN_NPM_FAILED: "RunNpmFailed";
    const RUN_SCRIPTS_BEGIN: "RunScriptsBegin";
    const RUN_SCRIPTS_FAILED: "RunScriptsFailed";
    const RUN_SCRIPTS_OK: "RunScriptsOk";
    const RUN_SCRIPT_BEGIN: "RunScriptBegin";
    const RUN_SCRIPT_FAILED: "RunScriptFailed";
    const RUN_SCRIPT_OK: "RunScriptOk";
}
export function smoke(scripts: string | string[], opts?: import("./static").SmokerOptions | undefined): Promise<void>;
export type SmokerOptions = import('./static').SmokerOptions;
export type PackItem = import('./static').PackItem;
export type PackOptions = import('./static').PackOptions;
export type RunScriptResult = import('./static').RunScriptResult;
export type Events = import('./static').Events;
export type TSmokerEmitter = import('./static').TSmokerEmitter;
declare const Smoker_base: new () => import("./static").TSmokerEmitter;
export class Smoker extends Smoker_base {
    /**
     *
     * @param {string|string[]} scripts
     * @param {SmokerOptions} [opts]
     */
    constructor(scripts: string | string[], opts?: import("./static").SmokerOptions | undefined);
    /**
     * @type {string[]}
     */
    scripts: string[];
    /**
     * @type {Readonly<SmokerOptions>}
     */
    opts: Readonly<SmokerOptions>;
    smoke(): Promise<void>;
    /**
     *
     * @returns {Promise<string>}
     */
    findNpm(): Promise<string>;
    /**
     *
     * @returns {Promise<string>}
     */
    createWorkingDirectory(): Promise<string>;
    /**
     * Runs `npm pack` on each package in `workspaces`
     * @returns {Promise<PackItem[]>}
     */
    pack(): Promise<PackItem[]>;
    /**
     * Runs `npm install` with every packed file in a temp dir
     * @param {PackItem[]} packItems
     * @returns {Promise<void>}
     */
    install(packItems: PackItem[]): Promise<void>;
    /**
     * Runs the script for each package in `packItems`
     * @param {PackItem[]} packItems
     * @returns {Promise<RunScriptResult[]>}
     */
    runScripts(packItems: PackItem[]): Promise<RunScriptResult[]>;
    /**
     * Cleans up; called by {@linkcode Smoker.smoke}.
     */
    cleanup(): Promise<void>;
    #private;
}
export {};
